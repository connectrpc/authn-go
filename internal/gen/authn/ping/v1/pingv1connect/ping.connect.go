// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The canonical location for this file is
// https://github.com/connectrpc/authn-go/blob/main/internal/proto/authn/ping/v1/ping.proto.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authn/ping/v1/ping.proto

package pingv1connect

import (
	v1 "connectrpc.com/authn/internal/gen/authn/ping/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PingServiceName is the fully-qualified name of the PingService service.
	PingServiceName = "authn.ping.v1.PingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PingServicePingProcedure is the fully-qualified name of the PingService's Ping RPC.
	PingServicePingProcedure = "/authn.ping.v1.PingService/Ping"
	// PingServicePingStreamProcedure is the fully-qualified name of the PingService's PingStream RPC.
	PingServicePingStreamProcedure = "/authn.ping.v1.PingService/PingStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pingServiceServiceDescriptor          = v1.File_authn_ping_v1_ping_proto.Services().ByName("PingService")
	pingServicePingMethodDescriptor       = pingServiceServiceDescriptor.Methods().ByName("Ping")
	pingServicePingStreamMethodDescriptor = pingServiceServiceDescriptor.Methods().ByName("PingStream")
)

// PingServiceClient is a client for the authn.ping.v1.PingService service.
type PingServiceClient interface {
	// Ping is a unary RPC that returns the same text that was sent.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// PingStream is a bidirectional stream of pings.
	PingStream(context.Context) *connect.BidiStreamForClient[v1.PingStreamRequest, v1.PingStreamResponse]
}

// NewPingServiceClient constructs a client for the authn.ping.v1.PingService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pingServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+PingServicePingProcedure,
			connect.WithSchema(pingServicePingMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		pingStream: connect.NewClient[v1.PingStreamRequest, v1.PingStreamResponse](
			httpClient,
			baseURL+PingServicePingStreamProcedure,
			connect.WithSchema(pingServicePingStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pingServiceClient implements PingServiceClient.
type pingServiceClient struct {
	ping       *connect.Client[v1.PingRequest, v1.PingResponse]
	pingStream *connect.Client[v1.PingStreamRequest, v1.PingStreamResponse]
}

// Ping calls authn.ping.v1.PingService.Ping.
func (c *pingServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PingStream calls authn.ping.v1.PingService.PingStream.
func (c *pingServiceClient) PingStream(ctx context.Context) *connect.BidiStreamForClient[v1.PingStreamRequest, v1.PingStreamResponse] {
	return c.pingStream.CallBidiStream(ctx)
}

// PingServiceHandler is an implementation of the authn.ping.v1.PingService service.
type PingServiceHandler interface {
	// Ping is a unary RPC that returns the same text that was sent.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// PingStream is a bidirectional stream of pings.
	PingStream(context.Context, *connect.BidiStream[v1.PingStreamRequest, v1.PingStreamResponse]) error
}

// NewPingServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPingServiceHandler(svc PingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pingServicePingHandler := connect.NewUnaryHandler(
		PingServicePingProcedure,
		svc.Ping,
		connect.WithSchema(pingServicePingMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	pingServicePingStreamHandler := connect.NewBidiStreamHandler(
		PingServicePingStreamProcedure,
		svc.PingStream,
		connect.WithSchema(pingServicePingStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/authn.ping.v1.PingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PingServicePingProcedure:
			pingServicePingHandler.ServeHTTP(w, r)
		case PingServicePingStreamProcedure:
			pingServicePingStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPingServiceHandler struct{}

func (UnimplementedPingServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authn.ping.v1.PingService.Ping is not implemented"))
}

func (UnimplementedPingServiceHandler) PingStream(context.Context, *connect.BidiStream[v1.PingStreamRequest, v1.PingStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("authn.ping.v1.PingService.PingStream is not implemented"))
}
